//
// Prefix header for all source files of the 'Hydra' target in the 'Hydra' project
//

#import <Availability.h>

#ifndef __IPHONE_7_0
#warning "This project uses features only available in iOS SDK 5.0 and later."
#endif

#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import <SystemConfiguration/SystemConfiguration.h>
#import <MobileCoreServices/MobileCoreServices.h>
#import <GAI.h>
#import <GAIDictionaryBuilder.h>
#import <GAIFields.h>
#import "UIColor+AppColors.h"
#endif

#define PUBLIC_RELEASE 1
#define BETA_RELEASE !PUBLIC_RELEASE

#if PUBLIC_RELEASE
    #define GoogleAnalyticsEnabled 1
#elif !TARGET_IPHONE_SIMULATOR && !DEBUG
    #define GoogleAnalyticsEnabled 0
#else
    #define GoogleAnalyticsEnabled 0
#endif

#if GoogleAnalyticsEnabled
    #define GAI_Track(screen) { id<GAITracker> tracker = [[GAI sharedInstance] defaultTracker]; \
                                [tracker set:kGAIScreenName value:screen]; \
                                [tracker send:[[GAIDictionaryBuilder createAppView]  build]];\
                              }
#else
    #define GAI_Track(screen) do { } while (0)
#endif

#if DEBUG

#define DLog(...) NSLog(@"%s %@", __PRETTY_FUNCTION__, [NSString stringWithFormat:__VA_ARGS__])
#define VLog(variable) NSLog(@"%s = %@", #variable, (variable))
#define AssertLog(...) [[NSAssertionHandler currentHandler] handleFailureInFunction:[NSString stringWithCString:__PRETTY_FUNCTION__ encoding:NSUTF8StringEncoding] file:[NSString stringWithCString:__FILE__ encoding:NSUTF8StringEncoding] lineNumber:__LINE__ description:__VA_ARGS__]
#define UILog(...) { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%s\n", __PRETTY_FUNCTION__] message:[NSString stringWithFormat:__VA_ARGS__] delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil]; [alert show]; }

#else

#define DLog(...) do { } while (0)
#define VLog(...) do { } while (0)
#define AssertLog(...) NSLog(@"%s %@", __PRETTY_FUNCTION__, [NSString stringWithFormat:__VA_ARGS__])
#define UILog(...) do { } while (0)

#ifndef NS_BLOCK_ASSERTIONS
    #define NS_BLOCK_ASSERTIONS
#endif

#endif

#define ZAssert(condition, ...) do { if (!(condition)) { AssertLog(__VA_ARGS__); }} while(0)
#define NSStringFromBOOL(aBOOL) (aBOOL ? @"YES" : @"NO")
#define AssertClassOrNil(var, clazz) do { if (![(var) isKindOfClass:[clazz class]]) { var = nil; } } while(0)

#define IOS_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)
#define IOS_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)
#define IOS_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
#define IOS_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)
#define IOS_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)
